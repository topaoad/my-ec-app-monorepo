// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  nickname      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  purchases     Purchase[]
  favorites     Favorite[]
  orders        Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// お気に入り
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

// 注文履歴
model Order {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

generator zod {
  provider = "npx zod-prisma-types"
  output   = "./generated/zod" // 生成されたファイルの出力先ディレクトリ
  useMultipleFiles = true                  // 各モデルに対して別々のファイルを生成する
  writeBarrelFiles = false                 // index.ts（バレルファイル）を生成しない
  createInputTypes = false                 // Prismaの入力型（Create, Update等）に対応するZodスキーマを生成しない
  // createModelTypes = true                // Prismaモデルに基づいてZodスキーマ型を生成する（デフォルト：true）
  // addInputTypeValidation = true          // 入力型にバリデーションを追加する（デフォルト：true）
  // addIncludeType = true                  // includeオプション用の型を生成する（デフォルト：true）
  // addSelectType = true                   // selectオプション用の型を生成する（デフォルト：true）
  // validateWhereUniqueInput = true        // WhereUniqueInput型にバリデーションを追加する（デフォルト：true）
  createOptionalDefaultValuesTypes = true  // デフォルト値を持つフィールドをオプショナルにした型を生成する
  createRelationValuesTypes = true         // リレーションの値に対する型を生成する
  createPartialTypes = true                // 部分的な型を生成する
  // useDefaultValidators = true            // Prismaスキーマに基づいたデフォルトのバリデーターを使用する（デフォルト：true）
  // coerceDate = true                      // 日付文字列をDateオブジェクトに自動変換する（デフォルト：true）
  writeNullishInModelTypes = true          // モデル型でnullish（nullまたはundefined）を明示的に書き込む
  // prismaClientPath = "./path/to/prisma/client" // Prisma Clientのパスを指定（デフォルト：クライアント出力パス）
}

